
                           ===========================
                           ENSF545 Intro to VR - Notes
                           ===========================


============================================================================================
General Introduction

Lab is in ENA006

Thursday => We will meet in the theaters (ST055), then move to lab for demos
Then we will move to ENA006
   => Should have 24hr access to lab

There are 8 workstations available (#9 - 16)
   => Noticably different

Group into teams of 2x => Jennifer

In the team:
   - 3 Lab Assignments (2 weeks long)
   - 1 Oral Presentation
   - 1 Course Project

Prof is available during the lab for questions
Reading materials are on Blackboard

What is VR?
   - Users R Important
   - VR = VE (Virtual Environment)

Tasks - what people actually want to do - important

Graphics pipeline - Application => Geometry => Rasterizer

First lab posted next Tuesday, have two weeks
Don't have to show up during lab session, but prof will be there to help

Might have access to a cool VR lab for the project (maybe)

CAVE = Computer Automated Virtual Environment
RAVE = Reconfigurable Automated Virtual Environment

Haptic device => force feedback
Have low-precision haptic devices in ENA006

The CAVE:
   - Keep in mind - what else could this tech be used for?
                  - what are the basic technologies required?




============================================================================================
Mathematics - How to decribe the scene, and repress memories from MATH211

Mathematics - Describing the Scene

Local vs World Coordinates
   - Exactly what you think they are.

Right vs Left Handed
   - In left-handed coordinate systems, Z goes into the screen (like OpenGL)

Vectors
   - Points are not vectors; points are positions in space, a vector is a difference in space
   - Points don't necessarily have a direction; vectors do.
   - You can't add points

Vector Operations
   - Prof defines length as "modulus" (even though she writes it as absolute value)
   - Dot product is a scalar
      - Dot product of perpendicular vectors is zero
   - Cross product is perpendicular

The General Transformation Matrix:
   [ R1  R2  R3  T1 ]
   [ R4  R5  R6  T2 ]
   [ R7  R8  R9  T3 ]
   [ 0   0   0   1  ]

   Recall that T* aren't actually the translation; they're affected by the rotation components

More Matricies
   - This is called a Homogeneous / Transform Matrix
   - R is rotation/scale, T is translation

So for just scaling:
   R1, R5, R9 will be the 3D scale factor
   All other variables will be zero

   [ S1  0   0   0  ]
   [ 0   S2  0   0  ]
   [ 0   0   S3  0  ]
   [ 0   0   0   1  ]

For Translation:
   Everything is identity, except the T components

   [ 1   0   0   t1 ]
   [ 0   1   0   t2 ]
   [ 0   0   1   t3 ]
   [ 0   0   0   1  ]

   We use "small t" in this, because it isn't necessarily the same as big T in the
   master matrix (due to rotation/scale/etc)

Matrix Multiplication Order Matters!
   Operations are resolved right-to-left.

   i.e. (Rotation Matrix)(Translation Matrix) = (Translate THEN Rotate Matrix)

How to tell what kind of transformation it is:
   - If it's along the main diagonal, it's scale
   - Otherwise, wherever the "1" is is the axis along which it's a rotation
   - The T-components are translation

How to Make a Rotation Matrix:
   - Start with a zero-matrix
   - Put a "1" in the identity point for the axis you want to rotate about

      e.g. for y:
      [ 0      0      0      0  ]
      [ 0      1      0      0  ]
      [ 0      0      0      0  ]
      [ 0      0      0      1  ]

   - Put some cosines along the diagonal

      e.g. for y:
      [ cos    0      0      0  ]
      [ 0      1      0      0  ]
      [ 0      0      cos    0  ]
      [ 0      0      0      1  ]

   - In the corners, put -sin/+sin for x and z, or +sin/-sin for y

      e.g. for y:
      [ cos    0      sin    0  ]
      [ 0      1      0      0  ]
      [ -sin   0      cos    0  ]
      [ 0      0      0      1  ]

Exercises
   
Calculate pi/2 about X, then pi/2 about Y, then pi/2 about Z

   Rotate about x:
   [ 1      0      0      0  ]
   [ 0      cos    -sin   0  ]
   [ 0      sin    cos    0  ]
   [ 0      0      0      1  ]

   Rotate about y:
   [ cos    0      sin    0  ]
   [ 0      1      0      0  ]
   [ -sin   0      cos    0  ]
   [ 0      0      0      1  ]

   Rotate about z:
   [ cos    -sin   0      0  ]
   [ sin    cos    0      0  ]
   [ 0      0      1      0  ]
   [ 0      0      0      1  ]

******
You will need to remember how to do 4x4 matrix multiplication for the exam!

******
More specifically, you'll need to know:
   - How to make the rotation matricies (remember y is backwards)
   - How to make a scale matrix
   - How to make a translation matrix
   - How to multiply them (row by column; right-to-left)



============================================================================================
Welcome to VR Programming

So what do you need?
   - A camera perspective
   - Some lights (spot and ambient)
   - An actual object (shape, color, etc)

Authoring a scene:
   - Model geometry
   - Define scene graph
   - Define and link sensors
   - Define actual functions
   - Define networking

Running a scene:
   - Start simulation
   - Read sensor data
   - Update objects 
   - Render scene
   - Repeat, or exit simulation

What is realtime?
   - Human physical responses take ~100ms
   - Human eyes can see at least 23fps; movies usually run at 30fps
   - Minimum requirement for video part of simulation is 30fps

   - When running with 3D, you actually need 60fps
   - Which means you need 120Hz

   - Touch?  About 25-50ms

Let's start with vision.

Major concepts of graphics:
   - Scene (the actual things)
   - View (looking into the things)
   - Rendering (making the view show up)

What data structure do you use?
   - A tree
   - Consists of a root, with children, who have children, etc.

The tree looks like:
   The Scene (Root)
      Lights
      Proximity Objects
         Person
         Chair
            Seat
               Geometry
               Material
            Legs
            Back
            etc
         Table
         Tree
      Distance Objects
      Background

What do Graphics APIs do?
   Objects
   Primitives (color, materials, etc)
   Transformations (translations, rotations, etc)
   Viewing
   Input
   Control (i.e. talking to the os)

VR Graphics and Utility Libraries
   Low-level:  OpenGL, Direct3D
   UI:         GLUT, Tweak
   Specific:   OpenHaptics
   High-level: VRML, Open Inventor, Blender, etc

OpenGL
   Developed in early 90s
   Standardized
   Procedural model, OS independent

   We're using OpenGL 2.0

OpenGL Libraries
   Gl/Glu are the actual utilities
   GLUT is a helper lib

OpenGL Model and the Process
   Model - define a 3D object in space
   Specify camera properties (position, orientation, projection, etc)

   Process:
      Transformation
      Clipping
      Projection 
      Rasterization

   OpenGL things start with "gl"

Primatives / Polygon Meshes
   Points, Lines, Polygons, Triangles, Quads, Quad Strip, Triangle Strip, Triangle Fan

Ambient Light
   Approximation of global illumination

   Usually set for whole scene (Ia)
   Each object reflects a proportion (Ka)

   So far then Ir = KaIa

Diffuse Light
   Lambert's Law: Intensity is proportional to cos theta.

   Light with both components:
      Ir = Kd Ii ( n . l )

      Kd = Intensity
      Ii = Illumination
      n = Normal Vector
      l = Light Vector 

Phong Specularity:
   Use normal between eye and light instead of surface normal.

   Ks Ii ( h . n )^m

Quick Summary:
   How to draw lines, geometry, etc
   How to color objects
   How to transform objects

============================================================================================
Advanced VR Programming

**** Missed a chunk here :(

Stereoscopy
   - Two projections - left eye and right eye - on flat display
   - Horizontal parallax (R - L)
      R-L < 0; pops up out of screen 
      R-L > 0; pops down into screen

   - Similar terms for vertical parallax

Viewing stereo pairs
   - Uncrossed/parallel setup - when right eye sees right image, left eye sees left image
   - Crossed setup - where right eye sees left image, left eye sees right image
   - How to reverse sense of depth?

One vs Two Cameras
   Two Cameras 
      - Spatial separation
      - Each eye is a camera
      - Set left and right cameras

   One Camera
      - Temporal separation
      - One frustrum for each eye
      - Draw left and right frustrums

Ideals
   - Congruence for left and right images (color, geometry, brightness)
   - Avoidance of vertical parallax
   - Wide parallax (large separation of the eyes)
   - Maximum depth, but lowest parallax
   - Further distance of viewer from the display, the greater the parallax that can be tolerated
   - Minimize cross-talk (i.e. eyes seeing the wrong image)
   - Use lowest parallax for required depth
   - Parallax <= to the IPD
   - Other cues!

Problems that may occur
   - FOV incorrect (between human and camera)
   - Incorrect convertence (axes are not parallel)
   - Geometry COP doesn't match optical COP

OpenGL Display Lists
   - Use glNewList() / do the drawing / glEndList()
   - Then call glCallList() to redo the drawing in the future


============================================================================================
Output Devices 

Output devices include:
   - Graphics displays (i.e. visual feedback)
   - Haptic interfaces (force and touch feedback)
   - 3D Audio hardware

Stereoscopic Displays 
   - Two screens (autostereoscopic)
   - Shutter glasses 
   - Frequency (polarized)

Things to consider with stereoscopic displays
   - For what purposes is a stereoscopic display suitable?
   - How to present 2 images of the same environment?
   - How to deal with image discontinuity
   - What are the cost?
   - How does a stereo display differ in terms of performance?

Types of displays
   - LCD, CRT, Projector

   Projectors include:
      - Workbench
      - Cave 
      - Wall 
      - Domes 

***** Probably on the exam
Gluing two displays together:
   - Genlock + G-Sync - synchronize images 



============================================================================================
Some Random Notes 

New VR Lab Room 
   - Meet Friday in ENA06 at 3:00pm
   - Hiring tutors for ENCM339 ($15/hr)

Midterm - Next Week
   - Covers everything to the end of October 18th's lecture
   - 


============================================================================================
Force Feedback 

Stylus Devices:
   Haptic Interface Point - the point at which things happen (e.g. the tip of the pen)

   Parallel vs Serial Links - whether the axes are one-after-the-other, or all at the same time
   e.g. the Omni thing is serial.

Exoskeleton Devices:
   Can injure yourself

Consideration for Selecting Haptic Devices
   This slide looked important.

What is VR?
   A user interface that involves real-time stimulation through multiple sensorial channels
   - Vision, Sound, Touch, Smell, Taste

Input Devices
   - Tracking (mechanical, optical, etc)
   - Navigation Interfaces (trackball, probe)
   - Gesture Interfaces

Tracker Characteristics
   - Accuracy (resolution)
      - Noise
      - Drift
      - Sampling Rate (needs to be 2x the frequency of the signal; should be ~10x)
   - Measurement Rate
   - Latency

   Mechanical Trackers  
   - aka Exoskeletons

   Magnetic Trackers
   - Push AC through a magnet, receive on a DC line.
   - Pros and Cons:
      - Larger distances are difficult
      - Receiver can be small

   Optical Trackers 
   - Tracks an IR point
   - Can get confused by ambient lighting or obstacles
   - Can either have camera on ceiling look at user, or camera on user look at ceiling
   - Think of motion tracking for movies

   Magnetic vs Optical Trackers 
   - Magnetic has 6 DOF, optical has 3 + 3 interpreted
   - Magnetic is screwed up by metal 
   - Optical requires line of sight 
   - Optical has better sampling rate and accuracy 
   - Magnetic has a smaller work envelope.

Response Speed
   Visual needs to be 100ms
   Haptics need to be 50ms
   Want 100% margin for error -> need 25ms (= 40fps)

SGI Computers
   Defined modern graphics cards 
   64MB to 16GB of memory 

Graphics Rendering Pipeline 
   Application (what are we doing?)
   geometry    (what exactly does it look like?)
   Rasterizer  (put it in a buffer / on screen)

   Triangles are faster than quads

Buffers
   - Z Buffer 
   - Frame buffer (2x for double buffering)



============================================================================================
Studying for Midterm

Dot Product: (x*x) + (y*y) + (z*z)
Cross Product: i(yz - zy) - j(xz - zx) + k(yx - yx)

Sphere: x^2 + y^2 + z^2 = r^2

Matrix Multiplication: Row * Column

Rotation Matricies:  
   - cos goes along the diagonal
   - sin goes - / +
   - sin is negated for y (same as cross product)

Order Matters: (Old)(Transformation) = (New)

Graphics APIs: 
   - OpenGL/D3D for graphics
   - Glut for UI
   - OpenHaptics for touch
   - VRML for high-level design

Lighting Calculations:
   - Color =   (objectColor * ambientLight) 
             + (objectColor * lightColor * (normal . lightDirection))
             + (objectColor * lightColor * (halfBetweenLightAndEye . lightDirection))

GL Viewing
   - Matrix maps lookAt to -Z axis, eye to origin, up to y-axis
   - Clipping volume is what you can actually see 
   - Frustrum is a slice of the clipping volume

3D Stereo Video
   - Need to consider accomodation (focal length of eyes), convergence (eye rotation), 
                      binocular disparity (differences by eyes), motion parallax (relative
                      movement of points with respect to head)
   - Can use two cameras, or one camera with two frustrums

   Good stereo is made with:
      - Congruence of images
      - Avoidance of vertical parallax
      - Wide separation of eyes (better depth, but discomfort)
      - Minimal cross-talk (eyes seeing eachother's images)

Stereo Displays
   Personal Displays - works for single user; can be head-mounted, floor-supported,
                       or autostereoscopic
   OLEDs - don't need backlight, no intrinsic limits on resolution.  Good for HMDs,
           monitors.

   Floor-supported - HMDs, but with no associated weight
   Autostereoscopic - passive (small viewing area) or active (large viewing area)
                    - exists in cell phones, 3DS
   Holographic - floating in space, requires glasses
               - can be monitor or projector based
   Workbench - big table with projector underneath
   CAVE or RAVE - a whole bunch of projectors
   3D Glasses - Anaglyph, polarized, shutter, pulfrich glasses

   Resolution & Price is better with small monitor-style displays, size and users 
   are better with larger displays

Haptic Displays
   Skin "sensors" run at 10, 20-50 or 100-300 Hz

   Gloves - can use vibration, temperature
   Mechanical - exoskeleton, wall or desk mounted (like the omni pen things)
              - also joystick
              - serial vs parallel regarding multiple axes
              - can use cables and pullies to be better than vibration

   Mechanical is more expensive, provides more force, more flexible 
   Gloves are cheaper, run at higher frequency 

Input Devices
   Trackers - mechanical, optical, ultrasound, inertial
   Navigation Interfaces - Cube, mouse, trackball, 3D probe 
   Gesture interfaces - Gloves

   Worry about accuracy, precision, noise, drift, latency

   Magnetic tracker error 
   - noise = distance^4
   - metal = distance^4 / (to-metal^3 + from-metal^3)
   - 

   AC vs DC - AC has better resolution, smaller envelope
   DC is immune to non-ferromagnetic metals, AC induces a charge 


============================================================================================
Graphics Cards... or something

Lab Demos
   - Print out five of the marking sheets
   - Groups will give you feedback
   - Give all the sheets to the prof

Due on Tuesday
   - Topic for Presentation
   - Proposal isn't due for a while - the idea is to know what you're doing first.

Stuff to Do
   - Consent form for research proposal (!)



============================================================================================
I have no idea what's going on

Something about interview survey things - make them good.


============================================================================================
Presentations

Team 9 - Francis and Sara
   Virtual Reality in Games

   Contents [ 9 / 9 ]

      For a given application
      [x] What are the significances of this application in a given area?
      [x] What input/output devices VR engines and software are used?
      [x] How did the applications take into account user interaction?
      [x] Which aspects of the application are your favors?  Why?
      [x] Comments on the pros and cons of the application

      For a proposed application
      [x] Why does your team select this area and propose this application?
      [x] What types of expertise can your team contribute to this application?
      [x] What input/output devices, VR engines and software are needed for this application?
      [x] How would your team take care of user interaction in this application?

   Questions [ 1 / 1 ]

      [x] Coordinate to answering questions
      [x] Ability to listen to questions, clarity of answers

   Additional comments

      Interesting presentation; would love the gaming system!


Team ? - James and Ming

   Contents [ 9 / 9 ]

      For a given application
      [x] What are the significances of this application in a given area?
      [x] What input/output devices VR engines and software are used?
      [x] How did the applications take into account user interaction?
      [x] Which aspects of the application are your favors?  Why?
      [x] Comments on the pros and cons of the application

      For a proposed application
      [x] Why does your team select this area and propose this application?
      [x] What types of expertise can your team contribute to this application?
      [x] What input/output devices, VR engines and software are needed for this application?
      [x] How would your team take care of user interaction in this application?

   Questions [ 1 / 1 ]

      [x] Coordinate to answering questions
      [x] Ability to listen to questions, clarity of answers

   Additional comment

      CadCave sounds like something I'd like to play with


Team 4
   VR in Medical Applications - ParioSim and Virtual Date

   Contents [ 9 / 9 ]

      For a given application
      [x] What are the significances of this application in a given area?
      [x] What input/output devices VR engines and software are used?
      [x] How did the applications take into account user interaction?
      [x] Which aspects of the application are your favors?  Why?
      [x] Comments on the pros and cons of the application

      For a proposed application
      [x] Why does your team select this area and propose this application?
      [x] What types of expertise can your team contribute to this application?
      [x] What input/output devices, VR engines and software are needed for this application?
      [x] How would your team take care of user interaction in this application?

   Questions [ 1 / 1 ]

      [x] Coordinate to answering questions
      [x] Ability to listen to questions, clarity of answers

   Additional comment

      Anything that improves dentistry is good!


Team Elizer and Justin
   Education and Marketing

   Contents [ 9 / 9 ]

      For a given application
      [x] What are the significances of this application in a given area?
      [x] What input/output devices VR engines and software are used?
      [x] How did the applications take into account user interaction?
      [x] Which aspects of the application are your favors?  Why?
      [x] Comments on the pros and cons of the application

      For a proposed application
      [x] Why does your team select this area and propose this application?
      [x] What types of expertise can your team contribute to this application?
      [x] What input/output devices, VR engines and software are needed for this application?
      [x] How would your team take care of user interaction in this application?

   Questions [ 1 / 1 ]

      [x] Coordinate to answering questions
      [x] Ability to listen to questions, clarity of answers

   Additional comment

Template
   Elizer and Justin

   Contents [ _ / 9 ]

      For a given application
      [ ] What are the significances of this application in a given area?
      [ ] What input/output devices VR engines and software are used?
      [ ] How did the applications take into account user interaction?
      [ ] Which aspects of the application are your favors?  Why?
      [ ] Comments on the pros and cons of the application

      For a proposed application
      [ ] Why does your team select this area and propose this application?
      [ ] What types of expertise can your team contribute to this application?
      [ ] What input/output devices, VR engines and software are needed for this application?
      [ ] How would your team take care of user interaction in this application?

   Questions [ _ / 1 ]

      [ ] Coordinate to answering questions
      [ ] Ability to listen to questions, clarity of answers

   Additional comment
